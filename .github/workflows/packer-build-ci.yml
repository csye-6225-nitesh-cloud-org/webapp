name: Packer Build CI

on:
  push:
    branches: [ "main" ]

jobs:
  packer-build:
    name: Packer Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Intsall PostgreSQL
        run: |
          sudo apt update
          sudo apt install -y postgresql postgresql-contrib
          sudo systemctl start postgresql    

      - name: Configure PostgreSQL
        run: |
          sudo -u postgres psql -c "CREATE DATABASE ${{secrets.DB_NAME}};"
          sudo -u postgres psql -c "CREATE USER ${{ secrets.DB_USER }} WITH PASSWORD '${{ secrets.DB_PASSWORD }}';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DB_NAME }} TO ${{ secrets.DB_USER }};"

      - name: Zip Artifact
        run: |
          zip -r webapp.zip ./
          ls  -al

      - name: Configure Environment Variables
        run: |
          echo > .env
          echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo HOSTNAME=${{ secrets.HOSTNAME }} >> .env
          echo PUB_SUB_TOPIC=${{ secrets.PUB_SUB_TOPIC }} >> .env
          echo GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} >> .env

      - name: Run Test
        run: |
          npm i
          npm test

      - name: Install and Configure gcloud CLI
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          export_default_credentials: true

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: 'latest'

      - name: Pkrvars configuration
        run: |
          echo > gcp.pkrvars.hcl
          ls -al
          echo environment=\"${{ secrets.NODE_ENV }}\" >> gcp.pkrvars.hcl
          echo project_name=\"${{ secrets.PROJECT_NAME }}\" >> gcp.pkrvars.hcl
          echo source_image_family=\"${{ secrets.SOURCE_IMAGE_FAMILY }}\" >> gcp.pkrvars.hcl
          echo ssh_username=\"${{ secrets.SSH_USERNAME }}\" >> gcp.pkrvars.hcl
          echo zone=\"${{ secrets.ZONE }}\" >> gcp.pkrvars.hcl
          echo machineType=\"${{ secrets.MACHINETYPE }}\" >> gcp.pkrvars.hcl
          echo diskType=\"${{ secrets.DISKTYPE }}\" >> gcp.pkrvars.hcl
          echo diskSize=${{ secrets.DISKSIZE }} >> gcp.pkrvars.hcl
          echo image_family_name=\"${{ secrets.IMAGE_FAMILY_NAME}}\" >> gcp.pkrvars.hcl
          echo image_name=\"${{ secrets.IMAGE_NAME}}\" >> gcp.pkrvars.hcl

      - name: Packer Format
        run: packer fmt .
        id: format

      - name: Packer Init
        run: "packer init ./gcp.pkr.hcl"

      - name: Packer Validate
        id: validate
        run: "packer validate --var-file=gcp.pkrvars.hcl ./gcp.pkr.hcl"

      - name: Packer build
        id: build
        run: "packer build  --var-file=gcp.pkrvars.hcl ./gcp.pkr.hcl"

      - name: Extract Image Name
        id: extract_image
        run: |
          IMAGE_NAME=$(jq -r '.builds[0].artifact_id' packer-manifest.json)
          echo "Extracted Image Name: $IMAGE_NAME"
          echo "::set-output name=image_name::$IMAGE_NAME"

      - name: Create Instance Template
        run: |
          gcloud compute instance-templates create webapp-instance-template-${{ github.run_number }} \
            --instance-template-region=${{ vars.GCP_REGION }} \
            --machine-type=${{ vars.MACHINE_TYPE }} \
            --network-tier=${{ vars.NW_TIER }} \
            --subnet=${{ secrets.GCP_SUBNET }} \
            --region=${{ vars.GCP_REGION }} \
            --metadata=startup-script='#!/bin/bash
          cat > ${{ vars.APP_PATH }} << End
          NODE_ENV=${{ secrets.NODE_ENV }}
          DB_HOST=${{ secrets.GCP_DB_HOST }}
          DB_USER=${{ secrets.GCP_DB_USER }}
          DB_PASSWORD=${{ secrets.GCP_DB_PASS }}
          DB_NAME=${{ secrets.GCP_DB_NAME }}
          DB_PORT=${{ secrets.DB_PORT }}
          PORT=${{ secrets.PORT }}
          HOSTNAME=${{ secrets.HOSTNAME }}
          PUB_SUB_TOPIC=${{ secrets.PUB_SUB_TOPIC }}
          GCP_PROJECT_ID=${{ secrets.PROJECT_NAME }}
          End' \
            --maintenance-policy=MIGRATE \
            --provisioning-model=STANDARD \
            --service-account=${{ vars.SERVICE_ACCOUNT }} \
            --scopes=${{ vars.GCP_SCOPES }} \
            --tags=${{ vars.GCP_TAGS }} \
            --create-disk="auto-delete=yes,boot=yes,device-name=persistent-disk-0,image=projects/${{ secrets.PROJECT_NAME }}/global/images/${{ steps.extract_image.outputs.image_name }},kms-key=projects/${{ secrets.PROJECT_NAME }}/locations/${{ vars.GCP_REGION }}/keyRings/${{ secrets.KEYRING }}/cryptoKeys/${{ secrets.VM_KEY }},mode=rw,size=20,type=pd-standard" \
            --no-shielded-secure-boot \
            --shielded-vtpm \
            --shielded-integrity-monitoring \
            --reservation-affinity=any


      - name: Set Instance Template
        id: set_instance_template
        run: |
          gcloud compute instance-groups managed set-instance-template ${{ vars.MIG_NAME }} \
          	--template=projects/${{ secrets.PROJECT_NAME }}/regions/${{ vars.GCP_REGION }}/instanceTemplates/webapp-instance-template-${{ github.run_number }} \
          	--region=${{ vars.GCP_REGION }}

      - name: Start Rolling Update
        id: update_mig
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ vars.MIG_NAME }} \
            --version=template=projects/${{ secrets.PROJECT_NAME }}/regions/${{ vars.GCP_REGION }}/instanceTemplates/webapp-instance-template-${{ github.run_number }} \
            --region=${{ vars.GCP_REGION }}

      - name: Wait for MIG to roll updates
        id: wait_for_update
        run: |
          gcloud compute instance-groups managed wait-until webapp-igm \
            --version-target-reached \
            --region us-central1; then
                echo "Version target reached successfully."
                exit 0
              else
                echo "Failed to reach the version target."
                exit 1
              fi